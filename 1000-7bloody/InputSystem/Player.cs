//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Player_ActionMap"",
            ""id"": ""4f0ab529-74b7-4196-a325-484009a8c6fd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1f1ded77-b875-4680-9e79-05cbe3c136af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""34326d95-04a0-415a-904c-d4b018a3ee4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeStrike"",
                    ""type"": ""Button"",
                    ""id"": ""c4ca0813-f0aa-4fee-9ae5-27d221687ca9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c5e9a80-883c-4e62-9f70-8df6517a16a3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1a2507a-9b25-40b9-8eb6-f0cff34345db"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b876096a-943c-4666-8e91-63946bc3abf6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8c663ae7-f765-4110-889c-4662a867973c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f72f3ba2-e52a-4a0d-87db-c6af8e5090ee"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b69ada83-3015-448c-b620-bd81a80ba32f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e41ae05e-68ba-4b39-aa63-639c317949cb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7063c9f7-bad0-4975-96c9-0d6a106af2b2"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeStrike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2cb9bb5-5056-48b8-8dad-8d6438c0117f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeStrike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_ActionMap
        m_Player_ActionMap = asset.FindActionMap("Player_ActionMap", throwIfNotFound: true);
        m_Player_ActionMap_Move = m_Player_ActionMap.FindAction("Move", throwIfNotFound: true);
        m_Player_ActionMap_Jump = m_Player_ActionMap.FindAction("Jump", throwIfNotFound: true);
        m_Player_ActionMap_MeleeStrike = m_Player_ActionMap.FindAction("MeleeStrike", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_ActionMap
    private readonly InputActionMap m_Player_ActionMap;
    private IPlayer_ActionMapActions m_Player_ActionMapActionsCallbackInterface;
    private readonly InputAction m_Player_ActionMap_Move;
    private readonly InputAction m_Player_ActionMap_Jump;
    private readonly InputAction m_Player_ActionMap_MeleeStrike;
    public struct Player_ActionMapActions
    {
        private @Player m_Wrapper;
        public Player_ActionMapActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_ActionMap_Move;
        public InputAction @Jump => m_Wrapper.m_Player_ActionMap_Jump;
        public InputAction @MeleeStrike => m_Wrapper.m_Player_ActionMap_MeleeStrike;
        public InputActionMap Get() { return m_Wrapper.m_Player_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_ActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_ActionMapActions instance)
        {
            if (m_Wrapper.m_Player_ActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnJump;
                @MeleeStrike.started -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnMeleeStrike;
                @MeleeStrike.performed -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnMeleeStrike;
                @MeleeStrike.canceled -= m_Wrapper.m_Player_ActionMapActionsCallbackInterface.OnMeleeStrike;
            }
            m_Wrapper.m_Player_ActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MeleeStrike.started += instance.OnMeleeStrike;
                @MeleeStrike.performed += instance.OnMeleeStrike;
                @MeleeStrike.canceled += instance.OnMeleeStrike;
            }
        }
    }
    public Player_ActionMapActions @Player_ActionMap => new Player_ActionMapActions(this);
    public interface IPlayer_ActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMeleeStrike(InputAction.CallbackContext context);
    }
}
